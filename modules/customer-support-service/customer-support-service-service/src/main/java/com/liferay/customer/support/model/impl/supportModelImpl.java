/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.customer.support.model.impl;

import com.liferay.customer.support.model.support;
import com.liferay.customer.support.model.supportModel;
import com.liferay.customer.support.model.supportSoap;
import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the support service. Represents a row in the &quot;panasonic_support&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>supportModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link supportImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see supportImpl
 * @generated
 */
@JSON(strict = true)
public class supportModelImpl
	extends BaseModelImpl<support> implements supportModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a support model instance should use the <code>support</code> interface instead.
	 */
	public static final String TABLE_NAME = "panasonic_support";

	public static final Object[][] TABLE_COLUMNS = {
		{"spportId", Types.BIGINT}, {"claim", Types.VARCHAR},
		{"query", Types.VARCHAR}, {"suggestioncomplaint", Types.VARCHAR},
		{"BU", Types.VARCHAR}, {"channel", Types.VARCHAR},
		{"invoiceNumber", Types.BIGINT}, {"invoiceDate", Types.TIMESTAMP},
		{"itemValueInvoice", Types.BIGINT}, {"itemValueYou", Types.BIGINT},
		{"claimValue", Types.BIGINT}, {"detailClaim", Types.VARCHAR},
		{"querybox", Types.VARCHAR}, {"scBox", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("spportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("claim", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("query", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("suggestioncomplaint", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("BU", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("channel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("invoiceNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("invoiceDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("itemValueInvoice", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("itemValueYou", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("claimValue", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("detailClaim", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("querybox", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("scBox", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table panasonic_support (spportId LONG not null primary key,claim VARCHAR(75) null,query VARCHAR(75) null,suggestioncomplaint VARCHAR(75) null,BU VARCHAR(75) null,channel VARCHAR(75) null,invoiceNumber LONG,invoiceDate DATE null,itemValueInvoice LONG,itemValueYou LONG,claimValue LONG,detailClaim VARCHAR(75) null,querybox VARCHAR(75) null,scBox VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table panasonic_support";

	public static final String ORDER_BY_JPQL = " ORDER BY support.spportId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY panasonic_support.spportId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SPPORTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static support toModel(supportSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		support model = new supportImpl();

		model.setSpportId(soapModel.getSpportId());
		model.setClaim(soapModel.getClaim());
		model.setQuery(soapModel.getQuery());
		model.setSuggestioncomplaint(soapModel.getSuggestioncomplaint());
		model.setBU(soapModel.getBU());
		model.setChannel(soapModel.getChannel());
		model.setInvoiceNumber(soapModel.getInvoiceNumber());
		model.setInvoiceDate(soapModel.getInvoiceDate());
		model.setItemValueInvoice(soapModel.getItemValueInvoice());
		model.setItemValueYou(soapModel.getItemValueYou());
		model.setClaimValue(soapModel.getClaimValue());
		model.setDetailClaim(soapModel.getDetailClaim());
		model.setQuerybox(soapModel.getQuerybox());
		model.setScBox(soapModel.getScBox());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<support> toModels(supportSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<support> models = new ArrayList<support>(soapModels.length);

		for (supportSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public supportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return support.class;
	}

	@Override
	public String getModelClassName() {
		return support.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<support, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<support, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<support, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((support)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<support, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<support, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(support)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<support, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<support, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<support, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<support, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<support, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<support, Object>>();
		Map<String, BiConsumer<support, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<support, ?>>();

		attributeGetterFunctions.put("spportId", support::getSpportId);
		attributeSetterBiConsumers.put(
			"spportId", (BiConsumer<support, Long>)support::setSpportId);
		attributeGetterFunctions.put("claim", support::getClaim);
		attributeSetterBiConsumers.put(
			"claim", (BiConsumer<support, String>)support::setClaim);
		attributeGetterFunctions.put("query", support::getQuery);
		attributeSetterBiConsumers.put(
			"query", (BiConsumer<support, String>)support::setQuery);
		attributeGetterFunctions.put(
			"suggestioncomplaint", support::getSuggestioncomplaint);
		attributeSetterBiConsumers.put(
			"suggestioncomplaint",
			(BiConsumer<support, String>)support::setSuggestioncomplaint);
		attributeGetterFunctions.put("BU", support::getBU);
		attributeSetterBiConsumers.put(
			"BU", (BiConsumer<support, String>)support::setBU);
		attributeGetterFunctions.put("channel", support::getChannel);
		attributeSetterBiConsumers.put(
			"channel", (BiConsumer<support, String>)support::setChannel);
		attributeGetterFunctions.put(
			"invoiceNumber", support::getInvoiceNumber);
		attributeSetterBiConsumers.put(
			"invoiceNumber",
			(BiConsumer<support, Long>)support::setInvoiceNumber);
		attributeGetterFunctions.put("invoiceDate", support::getInvoiceDate);
		attributeSetterBiConsumers.put(
			"invoiceDate", (BiConsumer<support, Date>)support::setInvoiceDate);
		attributeGetterFunctions.put(
			"itemValueInvoice", support::getItemValueInvoice);
		attributeSetterBiConsumers.put(
			"itemValueInvoice",
			(BiConsumer<support, Long>)support::setItemValueInvoice);
		attributeGetterFunctions.put("itemValueYou", support::getItemValueYou);
		attributeSetterBiConsumers.put(
			"itemValueYou",
			(BiConsumer<support, Long>)support::setItemValueYou);
		attributeGetterFunctions.put("claimValue", support::getClaimValue);
		attributeSetterBiConsumers.put(
			"claimValue", (BiConsumer<support, Long>)support::setClaimValue);
		attributeGetterFunctions.put("detailClaim", support::getDetailClaim);
		attributeSetterBiConsumers.put(
			"detailClaim",
			(BiConsumer<support, String>)support::setDetailClaim);
		attributeGetterFunctions.put("querybox", support::getQuerybox);
		attributeSetterBiConsumers.put(
			"querybox", (BiConsumer<support, String>)support::setQuerybox);
		attributeGetterFunctions.put("scBox", support::getScBox);
		attributeSetterBiConsumers.put(
			"scBox", (BiConsumer<support, String>)support::setScBox);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getSpportId() {
		return _spportId;
	}

	@Override
	public void setSpportId(long spportId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spportId = spportId;
	}

	@JSON
	@Override
	public String getClaim() {
		if (_claim == null) {
			return "";
		}
		else {
			return _claim;
		}
	}

	@Override
	public void setClaim(String claim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claim = claim;
	}

	@JSON
	@Override
	public String getQuery() {
		if (_query == null) {
			return "";
		}
		else {
			return _query;
		}
	}

	@Override
	public void setQuery(String query) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_query = query;
	}

	@JSON
	@Override
	public String getSuggestioncomplaint() {
		if (_suggestioncomplaint == null) {
			return "";
		}
		else {
			return _suggestioncomplaint;
		}
	}

	@Override
	public void setSuggestioncomplaint(String suggestioncomplaint) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_suggestioncomplaint = suggestioncomplaint;
	}

	@JSON
	@Override
	public String getBU() {
		if (_BU == null) {
			return "";
		}
		else {
			return _BU;
		}
	}

	@Override
	public void setBU(String BU) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_BU = BU;
	}

	@JSON
	@Override
	public String getChannel() {
		if (_channel == null) {
			return "";
		}
		else {
			return _channel;
		}
	}

	@Override
	public void setChannel(String channel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_channel = channel;
	}

	@JSON
	@Override
	public long getInvoiceNumber() {
		return _invoiceNumber;
	}

	@Override
	public void setInvoiceNumber(long invoiceNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_invoiceNumber = invoiceNumber;
	}

	@JSON
	@Override
	public Date getInvoiceDate() {
		return _invoiceDate;
	}

	@Override
	public void setInvoiceDate(Date invoiceDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_invoiceDate = invoiceDate;
	}

	@JSON
	@Override
	public long getItemValueInvoice() {
		return _itemValueInvoice;
	}

	@Override
	public void setItemValueInvoice(long itemValueInvoice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemValueInvoice = itemValueInvoice;
	}

	@JSON
	@Override
	public long getItemValueYou() {
		return _itemValueYou;
	}

	@Override
	public void setItemValueYou(long itemValueYou) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemValueYou = itemValueYou;
	}

	@JSON
	@Override
	public long getClaimValue() {
		return _claimValue;
	}

	@Override
	public void setClaimValue(long claimValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_claimValue = claimValue;
	}

	@JSON
	@Override
	public String getDetailClaim() {
		if (_detailClaim == null) {
			return "";
		}
		else {
			return _detailClaim;
		}
	}

	@Override
	public void setDetailClaim(String detailClaim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_detailClaim = detailClaim;
	}

	@JSON
	@Override
	public String getQuerybox() {
		if (_querybox == null) {
			return "";
		}
		else {
			return _querybox;
		}
	}

	@Override
	public void setQuerybox(String querybox) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_querybox = querybox;
	}

	@JSON
	@Override
	public String getScBox() {
		if (_scBox == null) {
			return "";
		}
		else {
			return _scBox;
		}
	}

	@Override
	public void setScBox(String scBox) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_scBox = scBox;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, support.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public support toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, support>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		supportImpl supportImpl = new supportImpl();

		supportImpl.setSpportId(getSpportId());
		supportImpl.setClaim(getClaim());
		supportImpl.setQuery(getQuery());
		supportImpl.setSuggestioncomplaint(getSuggestioncomplaint());
		supportImpl.setBU(getBU());
		supportImpl.setChannel(getChannel());
		supportImpl.setInvoiceNumber(getInvoiceNumber());
		supportImpl.setInvoiceDate(getInvoiceDate());
		supportImpl.setItemValueInvoice(getItemValueInvoice());
		supportImpl.setItemValueYou(getItemValueYou());
		supportImpl.setClaimValue(getClaimValue());
		supportImpl.setDetailClaim(getDetailClaim());
		supportImpl.setQuerybox(getQuerybox());
		supportImpl.setScBox(getScBox());

		supportImpl.resetOriginalValues();

		return supportImpl;
	}

	@Override
	public int compareTo(support support) {
		int value = 0;

		if (getSpportId() < support.getSpportId()) {
			value = -1;
		}
		else if (getSpportId() > support.getSpportId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof support)) {
			return false;
		}

		support support = (support)object;

		long primaryKey = support.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<support> toCacheModel() {
		supportCacheModel supportCacheModel = new supportCacheModel();

		supportCacheModel.spportId = getSpportId();

		supportCacheModel.claim = getClaim();

		String claim = supportCacheModel.claim;

		if ((claim != null) && (claim.length() == 0)) {
			supportCacheModel.claim = null;
		}

		supportCacheModel.query = getQuery();

		String query = supportCacheModel.query;

		if ((query != null) && (query.length() == 0)) {
			supportCacheModel.query = null;
		}

		supportCacheModel.suggestioncomplaint = getSuggestioncomplaint();

		String suggestioncomplaint = supportCacheModel.suggestioncomplaint;

		if ((suggestioncomplaint != null) &&
			(suggestioncomplaint.length() == 0)) {

			supportCacheModel.suggestioncomplaint = null;
		}

		supportCacheModel.BU = getBU();

		String BU = supportCacheModel.BU;

		if ((BU != null) && (BU.length() == 0)) {
			supportCacheModel.BU = null;
		}

		supportCacheModel.channel = getChannel();

		String channel = supportCacheModel.channel;

		if ((channel != null) && (channel.length() == 0)) {
			supportCacheModel.channel = null;
		}

		supportCacheModel.invoiceNumber = getInvoiceNumber();

		Date invoiceDate = getInvoiceDate();

		if (invoiceDate != null) {
			supportCacheModel.invoiceDate = invoiceDate.getTime();
		}
		else {
			supportCacheModel.invoiceDate = Long.MIN_VALUE;
		}

		supportCacheModel.itemValueInvoice = getItemValueInvoice();

		supportCacheModel.itemValueYou = getItemValueYou();

		supportCacheModel.claimValue = getClaimValue();

		supportCacheModel.detailClaim = getDetailClaim();

		String detailClaim = supportCacheModel.detailClaim;

		if ((detailClaim != null) && (detailClaim.length() == 0)) {
			supportCacheModel.detailClaim = null;
		}

		supportCacheModel.querybox = getQuerybox();

		String querybox = supportCacheModel.querybox;

		if ((querybox != null) && (querybox.length() == 0)) {
			supportCacheModel.querybox = null;
		}

		supportCacheModel.scBox = getScBox();

		String scBox = supportCacheModel.scBox;

		if ((scBox != null) && (scBox.length() == 0)) {
			supportCacheModel.scBox = null;
		}

		return supportCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<support, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<support, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<support, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((support)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<support, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<support, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<support, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((support)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, support>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					support.class, ModelWrapper.class);

	}

	private long _spportId;
	private String _claim;
	private String _query;
	private String _suggestioncomplaint;

	private String _BU;

	private String _channel;
	private long _invoiceNumber;
	private Date _invoiceDate;
	private long _itemValueInvoice;
	private long _itemValueYou;
	private long _claimValue;
	private String _detailClaim;
	private String _querybox;
	private String _scBox;

	public <T> T getColumnValue(String columnName) {
		Function<support, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((support)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("spportId", _spportId);
		_columnOriginalValues.put("claim", _claim);
		_columnOriginalValues.put("query", _query);
		_columnOriginalValues.put("suggestioncomplaint", _suggestioncomplaint);
		_columnOriginalValues.put("BU", _BU);
		_columnOriginalValues.put("channel", _channel);
		_columnOriginalValues.put("invoiceNumber", _invoiceNumber);
		_columnOriginalValues.put("invoiceDate", _invoiceDate);
		_columnOriginalValues.put("itemValueInvoice", _itemValueInvoice);
		_columnOriginalValues.put("itemValueYou", _itemValueYou);
		_columnOriginalValues.put("claimValue", _claimValue);
		_columnOriginalValues.put("detailClaim", _detailClaim);
		_columnOriginalValues.put("querybox", _querybox);
		_columnOriginalValues.put("scBox", _scBox);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("spportId", 1L);

		columnBitmasks.put("claim", 2L);

		columnBitmasks.put("query", 4L);

		columnBitmasks.put("suggestioncomplaint", 8L);

		columnBitmasks.put("BU", 16L);

		columnBitmasks.put("channel", 32L);

		columnBitmasks.put("invoiceNumber", 64L);

		columnBitmasks.put("invoiceDate", 128L);

		columnBitmasks.put("itemValueInvoice", 256L);

		columnBitmasks.put("itemValueYou", 512L);

		columnBitmasks.put("claimValue", 1024L);

		columnBitmasks.put("detailClaim", 2048L);

		columnBitmasks.put("querybox", 4096L);

		columnBitmasks.put("scBox", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private support _escapedModel;

}